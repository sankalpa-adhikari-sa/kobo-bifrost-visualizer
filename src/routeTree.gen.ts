/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as HomeImport } from './routes/_home'
import { Route as HomeIndexImport } from './routes/_home/index'
import { Route as HomeRelevantImport } from './routes/_home/relevant'
import { Route as HomeInformationImport } from './routes/_home/information'
import { Route as HomeConstraintImport } from './routes/_home/constraint'

// Create/Update Routes

const HomeRoute = HomeImport.update({
  id: '/_home',
  getParentRoute: () => rootRoute,
} as any)

const HomeIndexRoute = HomeIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => HomeRoute,
} as any)

const HomeRelevantRoute = HomeRelevantImport.update({
  id: '/relevant',
  path: '/relevant',
  getParentRoute: () => HomeRoute,
} as any)

const HomeInformationRoute = HomeInformationImport.update({
  id: '/information',
  path: '/information',
  getParentRoute: () => HomeRoute,
} as any)

const HomeConstraintRoute = HomeConstraintImport.update({
  id: '/constraint',
  path: '/constraint',
  getParentRoute: () => HomeRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_home': {
      id: '/_home'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof HomeImport
      parentRoute: typeof rootRoute
    }
    '/_home/constraint': {
      id: '/_home/constraint'
      path: '/constraint'
      fullPath: '/constraint'
      preLoaderRoute: typeof HomeConstraintImport
      parentRoute: typeof HomeImport
    }
    '/_home/information': {
      id: '/_home/information'
      path: '/information'
      fullPath: '/information'
      preLoaderRoute: typeof HomeInformationImport
      parentRoute: typeof HomeImport
    }
    '/_home/relevant': {
      id: '/_home/relevant'
      path: '/relevant'
      fullPath: '/relevant'
      preLoaderRoute: typeof HomeRelevantImport
      parentRoute: typeof HomeImport
    }
    '/_home/': {
      id: '/_home/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof HomeIndexImport
      parentRoute: typeof HomeImport
    }
  }
}

// Create and export the route tree

interface HomeRouteChildren {
  HomeConstraintRoute: typeof HomeConstraintRoute
  HomeInformationRoute: typeof HomeInformationRoute
  HomeRelevantRoute: typeof HomeRelevantRoute
  HomeIndexRoute: typeof HomeIndexRoute
}

const HomeRouteChildren: HomeRouteChildren = {
  HomeConstraintRoute: HomeConstraintRoute,
  HomeInformationRoute: HomeInformationRoute,
  HomeRelevantRoute: HomeRelevantRoute,
  HomeIndexRoute: HomeIndexRoute,
}

const HomeRouteWithChildren = HomeRoute._addFileChildren(HomeRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof HomeRouteWithChildren
  '/constraint': typeof HomeConstraintRoute
  '/information': typeof HomeInformationRoute
  '/relevant': typeof HomeRelevantRoute
  '/': typeof HomeIndexRoute
}

export interface FileRoutesByTo {
  '/constraint': typeof HomeConstraintRoute
  '/information': typeof HomeInformationRoute
  '/relevant': typeof HomeRelevantRoute
  '/': typeof HomeIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_home': typeof HomeRouteWithChildren
  '/_home/constraint': typeof HomeConstraintRoute
  '/_home/information': typeof HomeInformationRoute
  '/_home/relevant': typeof HomeRelevantRoute
  '/_home/': typeof HomeIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/constraint' | '/information' | '/relevant' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/constraint' | '/information' | '/relevant' | '/'
  id:
    | '__root__'
    | '/_home'
    | '/_home/constraint'
    | '/_home/information'
    | '/_home/relevant'
    | '/_home/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  HomeRoute: typeof HomeRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  HomeRoute: HomeRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_home"
      ]
    },
    "/_home": {
      "filePath": "_home.tsx",
      "children": [
        "/_home/constraint",
        "/_home/information",
        "/_home/relevant",
        "/_home/"
      ]
    },
    "/_home/constraint": {
      "filePath": "_home/constraint.tsx",
      "parent": "/_home"
    },
    "/_home/information": {
      "filePath": "_home/information.tsx",
      "parent": "/_home"
    },
    "/_home/relevant": {
      "filePath": "_home/relevant.tsx",
      "parent": "/_home"
    },
    "/_home/": {
      "filePath": "_home/index.tsx",
      "parent": "/_home"
    }
  }
}
ROUTE_MANIFEST_END */
